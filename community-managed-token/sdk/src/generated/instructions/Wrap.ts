/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category Wrap
 * @category generated
 */
export const WrapStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number
}>([['instructionDiscriminator', beet.u8]], 'WrapInstructionArgs')
/**
 * Accounts required by the _Wrap_ instruction
 *
 * @property [_writable_] mint
 * @property [**signer**] mintAuthority
 * @property [**signer**] freezeAuthority
 * @property [] upstreamAuthority
 * @category Instructions
 * @category Wrap
 * @category generated
 */
export type WrapInstructionAccounts = {
  mint: web3.PublicKey
  mintAuthority: web3.PublicKey
  freezeAuthority: web3.PublicKey
  upstreamAuthority: web3.PublicKey
  tokenProgram?: web3.PublicKey
}

export const wrapInstructionDiscriminator = 8

/**
 * Creates a _Wrap_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category Wrap
 * @category generated
 */
export function createWrapInstruction(
  accounts: WrapInstructionAccounts,
  programId = new web3.PublicKey('CMTQqjzH6Anr9XcPVt73EFDTjWkJWPzH7H6DtvhHcyzV')
) {
  const [data] = WrapStruct.serialize({
    instructionDiscriminator: wrapInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.mint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mintAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.freezeAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.upstreamAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
